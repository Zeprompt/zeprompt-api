# ZePrompt API

## Pr√©sentation

API robuste pour la gestion des prompts, des utilisateurs et des fichiers, con√ßue avec Express.js, Sequelize, Redis et BullMQ.

### üéØ Fonctionnalit√©s principales

- ‚úÖ **Gestion des prompts** : Cr√©ation de prompts texte ou PDF avec images facultatives
- ‚úÖ **Syst√®me de queue** : Traitement asynchrone des fichiers (PDF, images) via BullMQ
- ‚úÖ **Optimisation d'images** : Redimensionnement et g√©n√©ration de thumbnails automatiques
- ‚úÖ **Profils utilisateurs** : Photos de profil, liens sociaux (GitHub, LinkedIn, Twitter, WhatsApp)
- ‚úÖ **Syst√®me de signalement** : Report de prompts et commentaires
- ‚úÖ **Authentification JWT** : S√©curisation des endpoints
- ‚úÖ **Documentation Swagger** : API document√©e et testablerompt API

## Pr√©sentation

API robuste pour la gestion des utilisateurs, la s√©curit√© et l‚Äôenvoi d‚Äôemails, con√ßue avec Express.js, Sequelize et Redis.

---

## Installation

### Pr√©requis

* Node.js (version 22+ recommand√©e)
* Redis (serveur local ou distant)
* Base de donn√©es PostgreSQL
* Git

### √âtapes

1. Clonez le d√©p√¥t :

```bash
git clone https://github.com/Lordkode/zeprompt-api.git
cd zeprompt-api
```

2. Installez les d√©pendances :

```bash
npm install
```

3. Configurez vos variables d‚Äôenvironnement :

Cr√©ez un fichier `.env` √† la racine et remplissez-le avec les variables n√©cessaires exemple dans `.env.example` :

4. Lancez le serveur en mode d√©veloppement :

```bash
npm run dev
```

Le serveur √©coute alors sur `http://localhost:3000`.

---

## Workflow Git et gestion des branches

Le projet utilise trois branches principales :

* **main** : Contient la version stable finale, toujours une copie propre et stable.
* **prod** : Version d√©ploy√©e en production, stable et test√©e.
* **dev** : Branche de d√©veloppement active. Tous les d√©veloppeurs doivent cr√©er leurs branches de fonctionnalit√©s √† partir de `dev`.

### Processus de contribution

1. Cr√©ez une branche pour votre fonctionnalit√© ou correctif √† partir de `dev` :

```bash
git checkout dev
git pull origin dev
git checkout -b feature/ma-nouvelle-fonctionnalite
```

2. Effectuez vos modifications et commitez-les de fa√ßon claire et concise.

3. Poussez votre branche sur GitHub :

```bash
git push -u origin feature/ma-nouvelle-fonctionnalite
```

4. Ouvrez une **Pull Request (PR)** vers la branche `dev` sur GitHub.

5. Une fois la PR revue, test√©e et valid√©e, elle sera fusionn√©e dans `dev`.

6. Apr√®s validation compl√®te sur `dev`, une fusion sera faite de `dev` vers `prod` pour le d√©ploiement.

7. Enfin, `main` est mise √† jour r√©guli√®rement pour contenir la version stable finale.

---

## Contribuer

* Merci de respecter les bonnes pratiques de code et le style existant.
* Assurez-vous que votre code est bien test√©.
* N‚Äôh√©sitez pas √† commenter et documenter vos ajouts.
* Toute contribution passe par une Pull Request vers la branche `dev`.
* Avant de pousser vos modifications, r√©cup√©rez les derni√®res mises √† jour de `dev`.
